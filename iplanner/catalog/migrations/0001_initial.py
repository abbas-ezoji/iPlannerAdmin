# Generated by Django 2.1.15 on 2020-07-13 14:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='About',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('description', models.TextField(db_column='Description')),
            ],
            options={
                'db_table': 'About',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Airport',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('name', models.CharField(db_column='Name', max_length=32)),
                ('english_name', models.CharField(blank=True, db_column='EnglishName', max_length=32, null=True)),
                ('icao', models.CharField(blank=True, db_column='Icao', max_length=8, null=True)),
                ('iata', models.CharField(blank=True, db_column='Iata', max_length=8, null=True)),
                ('url', models.CharField(blank=True, db_column='Url', max_length=64, null=True)),
                ('area_code', models.CharField(blank=True, db_column='AreaCode', max_length=4, null=True)),
                ('active', models.BooleanField(db_column='Active')),
                ('external_id', models.TextField(blank=True, db_column='ExternalId', null=True)),
            ],
            options={
                'db_table': 'Airport',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AirportType',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=32)),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'AirportType',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AspNetRoleClaims',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('claim_type', models.TextField(blank=True, db_column='ClaimType', null=True)),
                ('claim_value', models.TextField(blank=True, db_column='ClaimValue', null=True)),
            ],
            options={
                'db_table': 'AspNetRoleClaims',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AspNetRoles',
            fields=[
                ('id', models.CharField(db_column='Id', max_length=450, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='Name', max_length=256, null=True)),
                ('normalized_name', models.CharField(blank=True, db_column='NormalizedName', max_length=256, null=True, unique=True)),
                ('concurrency_stamp', models.TextField(blank=True, db_column='ConcurrencyStamp', null=True)),
            ],
            options={
                'db_table': 'AspNetRoles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AspNetUserClaims',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('claim_type', models.TextField(blank=True, db_column='ClaimType', null=True)),
                ('claim_value', models.TextField(blank=True, db_column='ClaimValue', null=True)),
            ],
            options={
                'db_table': 'AspNetUserClaims',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AspNetUserLogins',
            fields=[
                ('login_provider', models.CharField(db_column='LoginProvider', max_length=128, primary_key=True, serialize=False)),
                ('provider_key', models.CharField(db_column='ProviderKey', max_length=128)),
                ('provider_display_name', models.TextField(blank=True, db_column='ProviderDisplayName', null=True)),
            ],
            options={
                'db_table': 'AspNetUserLogins',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AspNetUsers',
            fields=[
                ('id', models.CharField(db_column='Id', max_length=450, primary_key=True, serialize=False)),
                ('user_name', models.CharField(blank=True, db_column='UserName', max_length=256, null=True)),
                ('normalized_user_name', models.CharField(blank=True, db_column='NormalizedUserName', max_length=256, null=True, unique=True)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=256, null=True)),
                ('normalized_email', models.CharField(blank=True, db_column='NormalizedEmail', max_length=256, null=True)),
                ('email_confirmed', models.BooleanField(db_column='EmailConfirmed')),
                ('password_hash', models.TextField(blank=True, db_column='PasswordHash', null=True)),
                ('security_stamp', models.TextField(blank=True, db_column='SecurityStamp', null=True)),
                ('concurrency_stamp', models.TextField(blank=True, db_column='ConcurrencyStamp', null=True)),
                ('phone_number', models.TextField(blank=True, db_column='PhoneNumber', null=True)),
                ('phone_number_confirmed', models.BooleanField(db_column='PhoneNumberConfirmed')),
                ('two_factor_enabled', models.BooleanField(db_column='TwoFactorEnabled')),
                ('lockout_end', models.TextField(blank=True, db_column='LockoutEnd', null=True)),
                ('lockout_enabled', models.BooleanField(db_column='LockoutEnabled')),
                ('access_failed_count', models.IntegerField(db_column='AccessFailedCount')),
            ],
            options={
                'db_table': 'AspNetUsers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Attraction',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=32)),
                ('full_title', models.CharField(blank=True, db_column='FullTitle', max_length=500, null=True)),
                ('english_title', models.CharField(blank=True, db_column='EnglishTitle', max_length=32, null=True)),
                ('address', models.TextField(blank=True, db_column='Address', null=True)),
                ('cost', models.CharField(blank=True, db_column='Cost', max_length=32, null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('when_to_visit', models.CharField(blank=True, db_column='WhenToVisit', max_length=512, null=True)),
                ('lat', models.FloatField(blank=True, db_column='Lat', null=True)),
                ('long', models.FloatField(blank=True, db_column='Long', null=True)),
                ('point', models.TextField(blank=True, db_column='Point', null=True)),
                ('visit_duration', models.IntegerField(blank=True, db_column='VisitDuration', null=True)),
                ('visit_time_from', models.IntegerField(blank=True, db_column='VisitTimeFrom', null=True)),
                ('visit_time_to', models.IntegerField(blank=True, db_column='VisitTimeTo', null=True)),
                ('can_visit', models.BooleanField(blank=True, db_column='CanVisit', null=True)),
                ('rate', models.FloatField(blank=True, db_column='Rate', null=True)),
                ('iplanner_rate', models.FloatField(blank=True, db_column='iPlannerRate', null=True)),
                ('user_rate', models.FloatField(blank=True, db_column='UserRate', null=True)),
                ('external_id', models.TextField(blank=True, db_column='ExternalId', null=True)),
            ],
            options={
                'db_table': 'Attraction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttractionCustoms',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('like', models.IntegerField(db_column='Like')),
                ('dislike', models.IntegerField(db_column='Dislike')),
                ('attraction', models.ForeignKey(db_column='AttractionId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Attraction')),
            ],
            options={
                'db_table': 'AttractionCustoms',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttractionCustomsReaction',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('user_react_type_code', models.IntegerField(db_column='UserReactTypeCode')),
                ('attraction_customs', models.ForeignKey(db_column='AttractionCustomsId', on_delete=django.db.models.deletion.PROTECT, to='catalog.AttractionCustoms')),
            ],
            options={
                'db_table': 'AttractionCustomsReaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttractionSurvey',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('parent_id', models.IntegerField(blank=True, db_column='ParentId', null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('rate', models.FloatField(db_column='Rate')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('like', models.IntegerField(db_column='Like')),
                ('dislike', models.IntegerField(db_column='Dislike')),
                ('isvisible', models.BooleanField(db_column='IsVisible')),
                ('attraction', models.ForeignKey(db_column='AttractionId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Attraction')),
            ],
            options={
                'db_table': 'AttractionSurvey',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttractionSurveyReaction',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('user_react_type_code', models.IntegerField(db_column='UserReactTypeCode')),
                ('attractionsurveyid', models.ForeignKey(db_column='AttractionSurveyId', on_delete=django.db.models.deletion.PROTECT, to='catalog.AttractionSurvey')),
            ],
            options={
                'db_table': 'AttractionSurveyReaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
            ],
            options={
                'verbose_name_plural': '1_Category',
                'db_table': 'Category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('name', models.CharField(db_column='Name', max_length=32)),
                ('english_name', models.CharField(db_column='EnglishName', max_length=32)),
                ('code', models.CharField(blank=True, db_column='Code', max_length=4, null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('when_to_visit', models.CharField(blank=True, db_column='WhenToVisit', max_length=512, null=True)),
                ('lat', models.FloatField(db_column='Lat')),
                ('long', models.FloatField(db_column='Long')),
                ('border', models.TextField(blank=True, db_column='Border', null=True)),
                ('external_id', models.CharField(blank=True, db_column='ExternalId', max_length=36, null=True)),
            ],
            options={
                'verbose_name_plural': '0_City',
                'db_table': 'City',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('body', models.CharField(db_column='Body', max_length=256)),
                ('email', models.CharField(db_column='Email', max_length=32)),
                ('tel', models.CharField(db_column='Tel', max_length=16)),
            ],
            options={
                'db_table': 'Complaint',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ComplaintCategory',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'ComplaintCategory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=128)),
                ('description', models.CharField(db_column='Description', max_length=512)),
                ('value', models.CharField(db_column='Value', max_length=64)),
                ('contacttypecode', models.SmallIntegerField(db_column='ContactTypeCode')),
            ],
            options={
                'db_table': 'Contact',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('name', models.CharField(db_column='Name', max_length=32)),
                ('english_name', models.CharField(db_column='EnglishName', max_length=32)),
                ('lat', models.FloatField(db_column='Lat')),
                ('long', models.FloatField(db_column='Long')),
                ('border', models.TextField(blank=True, db_column='Border', null=True)),
                ('code', models.CharField(blank=True, db_column='Code', max_length=4, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=512, null=True)),
                ('when_to_visit', models.CharField(blank=True, db_column='WhenToVisit', max_length=512, null=True)),
                ('iso3', models.CharField(blank=True, db_column='Iso3', max_length=4, null=True)),
                ('external_id', models.CharField(blank=True, db_column='ExternalId', max_length=36, null=True)),
            ],
            options={
                'verbose_name_plural': '0_Country',
                'db_table': 'Country',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
            ],
            options={
                'verbose_name_plural': '1_Department',
                'db_table': 'Department',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EFMigrationsHistory',
            fields=[
                ('MigrationId', models.CharField(db_column='UserId', max_length=150, primary_key=True, serialize=False)),
                ('ProductVersion', models.CharField(db_column='ProductVersion', max_length=32)),
            ],
            options={
                'db_table': '__EFMigrationsHistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EmergencyNeeds',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('description', models.CharField(db_column='Description', max_length=1024)),
            ],
            options={
                'db_table': 'EmergencyNeeds',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=32)),
                ('url_key', models.CharField(blank=True, db_column='UrlKey', max_length=128, null=True)),
                ('base_url', models.CharField(blank=True, db_column='BaseUrl', max_length=128, null=True)),
                ('image', models.TextField(blank=True, db_column='Image', null=True)),
                ('full_title', models.CharField(blank=True, db_column='FullTitle', max_length=64, null=True)),
                ('english_title', models.CharField(db_column='EnglishTitle', max_length=32)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=64, null=True)),
                ('regular_price', models.DecimalField(db_column='RegularPrice', decimal_places=2, max_digits=18)),
                ('deal_price', models.DecimalField(db_column='DealPrice', decimal_places=2, max_digits=18)),
                ('deal_discount', models.FloatField(db_column='DealDiscount')),
                ('sold_deal_quantity', models.IntegerField(db_column='SoldDealQuantity')),
                ('total_deal_quantity', models.IntegerField(db_column='TotalDealQuantity')),
                ('usage_deadline', models.IntegerField(db_column='UsageDeadline')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=512, null=True)),
                ('lat', models.FloatField(db_column='Lat')),
                ('long', models.FloatField(db_column='Long')),
                ('point', models.TextField(blank=True, db_column='Point', null=True)),
                ('visit_duration', models.IntegerField(db_column='VisitDuration')),
                ('visit_time_from', models.IntegerField(db_column='VisitTimeFrom')),
                ('visit_time_to', models.IntegerField(db_column='VisitTimeTo')),
                ('visit_date_from', models.DateTimeField(db_column='VisitDateFrom')),
                ('visit_date_to', models.DateTimeField(db_column='VisitDateTo')),
                ('rate', models.FloatField(db_column='Rate')),
                ('active', models.BooleanField(db_column='Active')),
                ('my_property', models.IntegerField(db_column='MyProperty')),
                ('external_id', models.CharField(blank=True, db_column='ExternalId', max_length=36, null=True)),
                ('external_product_id', models.CharField(blank=True, db_column='ExternalProductId', max_length=36, null=True)),
                ('city', models.ForeignKey(db_column='CityId', on_delete=django.db.models.deletion.PROTECT, to='catalog.City')),
            ],
            options={
                'db_table': 'Event',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventSurvey',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('parent_id', models.IntegerField(blank=True, db_column='ParentId', null=True)),
                ('menu_name', models.TextField(blank=True, db_column='MenuName', null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('rate', models.FloatField(db_column='Rate')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('like', models.IntegerField(db_column='Like')),
                ('dislike', models.IntegerField(db_column='Dislike')),
                ('isvisible', models.BooleanField(db_column='IsVisible')),
                ('event', models.ForeignKey(db_column='EventId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Event')),
            ],
            options={
                'db_table': 'EventSurvey',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventSurveyReaction',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('user_react_type_code', models.IntegerField(db_column='UserReactTypeCode')),
                ('event_survey', models.ForeignKey(db_column='EventSurveyId', on_delete=django.db.models.deletion.PROTECT, to='catalog.EventSurvey')),
            ],
            options={
                'db_table': 'EventSurveyReaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('event', models.ForeignKey(db_column='EventId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Event')),
            ],
            options={
                'db_table': 'EventTag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FavoriteAttraction',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('deleted', models.BooleanField(db_column='Deleted')),
                ('is_public', models.BooleanField(db_column='IsPublic')),
                ('attraction', models.ForeignKey(db_column='AttractionId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Attraction')),
            ],
            options={
                'db_table': 'FavoriteAttraction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=32)),
                ('full_title', models.CharField(blank=True, db_column='FullTitle', max_length=64, null=True)),
                ('english_title', models.CharField(db_column='EnglishTitle', max_length=32)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=64, null=True)),
                ('cost', models.CharField(blank=True, db_column='Cost', max_length=16, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=512, null=True)),
                ('lat', models.FloatField(db_column='Lat')),
                ('long', models.FloatField(db_column='Long')),
                ('point', models.TextField(blank=True, db_column='Point', null=True)),
                ('visit_time_from', models.DateTimeField(db_column='VisitTimeFrom')),
                ('visit_time_to', models.DateTimeField(db_column='VisitTimeTo')),
                ('can_visit', models.BooleanField(db_column='CanVisit')),
                ('rate', models.FloatField(db_column='Rate')),
                ('external_id', models.CharField(blank=True, db_column='ExternalId', max_length=32, null=True)),
                ('city', models.ForeignKey(db_column='CityId', on_delete=django.db.models.deletion.PROTECT, to='catalog.City')),
            ],
            options={
                'db_table': 'Hotel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HotelMeal',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('from_time', models.DateTimeField(db_column='FromTime')),
                ('to_time', models.DateTimeField(db_column='ToTime')),
                ('hotel', models.ForeignKey(db_column='HotelId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Hotel')),
            ],
            options={
                'db_table': 'HotelMeal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HotelSurvey',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('parent_id', models.IntegerField(blank=True, db_column='ParentId', null=True)),
                ('menu_name', models.TextField(blank=True, db_column='MenuName', null=True)),
                ('description', models.TextField(blank=True, db_column='Description', null=True)),
                ('rate', models.FloatField(db_column='Rate')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('like', models.IntegerField(db_column='Like')),
                ('dislike', models.IntegerField(db_column='Dislike')),
                ('isvisible', models.BooleanField(db_column='IsVisible')),
                ('hotel', models.ForeignKey(db_column='HotelId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Hotel')),
                ('hotelmeal', models.ForeignKey(db_column='HotelMealId', on_delete=django.db.models.deletion.PROTECT, to='catalog.HotelMeal')),
            ],
            options={
                'db_table': 'HotelSurvey',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HotelSurveyReaction',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('user_react_type_code', models.IntegerField(db_column='UserReactTypeCode')),
                ('hotel_survey', models.ForeignKey(db_column='HotelSurveyId', on_delete=django.db.models.deletion.PROTECT, to='catalog.HotelSurvey')),
            ],
            options={
                'db_table': 'HotelSurveyReaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HotelTag',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('hotel', models.ForeignKey(db_column='HotelId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Hotel')),
            ],
            options={
                'db_table': 'HotelTag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('from_time', models.DateTimeField(db_column='FromTime')),
                ('to_time', models.DateTimeField(db_column='ToTime')),
            ],
            options={
                'db_table': 'Meal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OnBoardingQuestion',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(blank=True, db_column='Title', max_length=128, null=True)),
                ('order_index', models.SmallIntegerField(db_column='OrderIndex')),
                ('anwer_type_code', models.SmallIntegerField(db_column='AnwerTypeCode')),
                ('can_be_skiped', models.BooleanField(db_column='CanBeSkiped')),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'verbose_name_plural': '3_OnBoarding Question',
                'db_table': 'OnBoardingQuestion',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Onboardingquestionanswer',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(blank=True, db_column='Title', max_length=36, null=True)),
                ('icon', models.BinaryField(blank=True, db_column='Icon', null=True)),
                ('active', models.BooleanField(db_column='Active')),
                ('onboarding_question', models.ForeignKey(db_column='OnBoardingQuestionId', on_delete=django.db.models.deletion.PROTECT, to='catalog.OnBoardingQuestion')),
            ],
            options={
                'verbose_name_plural': '3_Onboarding question answer',
                'db_table': 'OnBoardingQuestionAnswer',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Privacy',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('description', models.TextField(db_column='Description')),
            ],
            options={
                'db_table': 'Privacy',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('name', models.CharField(db_column='Name', max_length=32)),
                ('english_name', models.CharField(db_column='EnglishName', max_length=32)),
                ('code', models.CharField(blank=True, db_column='Code', max_length=4, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=512, null=True)),
                ('when_to_visit', models.CharField(blank=True, db_column='WhenToVisit', max_length=512, null=True)),
                ('lat', models.FloatField(db_column='Lat')),
                ('long', models.FloatField(db_column='Long')),
                ('border', models.TextField(blank=True, db_column='Border', null=True)),
                ('external_id', models.CharField(blank=True, db_column='ExternalId', max_length=36, null=True)),
                ('country', models.ForeignKey(db_column='CountryId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Country')),
            ],
            options={
                'verbose_name_plural': '0_Province',
                'db_table': 'Province',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReportedBug',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=128)),
                ('description', models.CharField(db_column='Description', max_length=512)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('resolved_time', models.DateTimeField(blank=True, db_column='ResolvedTime', null=True)),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'ReportedBug',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Rules',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=128)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('description', models.CharField(db_column='Description', max_length=512)),
            ],
            options={
                'db_table': 'Rules',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SavedAttraction',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('deleted', models.BooleanField(db_column='Deleted')),
                ('is_public', models.BooleanField(db_column='IsPublic')),
                ('attraction', models.ForeignKey(db_column='AttractionId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Attraction')),
            ],
            options={
                'db_table': 'SavedAttraction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('comment', models.TextField(blank=True, db_column='Comment', null=True)),
                ('category', models.ForeignKey(db_column='CategoryId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Category')),
            ],
            options={
                'verbose_name_plural': '1_Sub Category',
                'db_table': 'SubCategory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Suggestion',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=128)),
                ('description', models.CharField(db_column='Description', max_length=512)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'Suggestion',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=32)),
                ('active', models.BooleanField(db_column='Active')),
            ],
            options={
                'db_table': 'Tag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TagCategory',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=32)),
                ('active', models.BooleanField(db_column='Active')),
                ('external_id', models.TextField(blank=True, db_column='ExternalId', null=True)),
            ],
            options={
                'db_table': 'TagCategory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Travel',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.IntegerField(db_column='Title')),
                ('travel_status_type_code', models.IntegerField(db_column='TravelStatusTypeCode')),
            ],
            options={
                'db_table': 'Travel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TravelCity',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(db_column='StartDate')),
                ('end_date', models.DateTimeField(db_column='EndDate')),
                ('deleted', models.BooleanField(db_column='Deleted')),
                ('city', models.ForeignKey(db_column='CityId', on_delete=django.db.models.deletion.PROTECT, to='catalog.City')),
                ('travel', models.ForeignKey(db_column='TravelId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Travel')),
            ],
            options={
                'db_table': 'TravelCity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TravelCityPlan',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('plan', models.IntegerField(db_column='PlanId')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('deleted', models.BooleanField(db_column='Deleted')),
                ('travel_city', models.ForeignKey(db_column='TravelCityId', on_delete=django.db.models.deletion.PROTECT, to='catalog.TravelCity')),
            ],
            options={
                'db_table': 'TravelCityPlan',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TravelKnowledge',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('reference_id', models.IntegerField(db_column='ReferenceId')),
                ('entity_type_code', models.IntegerField(db_column='EntityTypeCode')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('description', models.CharField(db_column='Description', max_length=1024)),
            ],
            options={
                'db_table': 'TravelKnowledge',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Travelogue',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('description', models.TextField(db_column='Description')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('is_public', models.BooleanField(db_column='IsPublic')),
                ('can_published', models.BooleanField(db_column='CanPublished')),
            ],
            options={
                'db_table': 'Travelogue',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TravelogueImage',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('image_path', models.CharField(db_column='ImagePath', max_length=256)),
                ('is_public', models.BooleanField(db_column='IsPublic')),
                ('deleted', models.BooleanField(db_column='Deleted')),
                ('travelogue', models.ForeignKey(db_column='TravelogueId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Travelogue')),
            ],
            options={
                'db_table': 'TravelogueImage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TravelogueImageTag',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('tag', models.ForeignKey(db_column='TagId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Tag')),
                ('travelogue_image', models.ForeignKey(db_column='TravelogueImageId', on_delete=django.db.models.deletion.PROTECT, to='catalog.TravelogueImage')),
            ],
            options={
                'db_table': 'TravelogueImageTag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TravelogueTag',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('tag', models.ForeignKey(db_column='TagId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Tag')),
                ('travelogue', models.ForeignKey(db_column='TravelogueId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Travelogue')),
            ],
            options={
                'db_table': 'TravelogueTag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TravelTodo',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('title', models.TextField(blank=True, db_column='Title', null=True)),
                ('remind_me', models.BooleanField(db_column='RemindMe')),
                ('remind_time', models.DateTimeField(db_column='RemindTime')),
                ('done', models.BooleanField(db_column='Done')),
                ('travel', models.ForeignKey(db_column='TravelId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Travel')),
            ],
            options={
                'db_table': 'TravelTodo',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('show_on_boarding', models.BooleanField(db_column='ShowOnBoarding')),
                ('open_id', models.CharField(blank=True, db_column='OpenId', max_length=36, null=True)),
            ],
            options={
                'verbose_name_plural': '2_Customer',
                'db_table': 'User',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserCity',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('city', models.ForeignKey(db_column='CityId', on_delete=django.db.models.deletion.PROTECT, to='catalog.City')),
                ('user', models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User')),
            ],
            options={
                'verbose_name_plural': '2_Customer City',
                'db_table': 'UserCity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserNickName',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('nick_name', models.CharField(blank=True, db_column='NickName', max_length=16, null=True)),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('user', models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User')),
            ],
            options={
                'db_table': 'UserNickName',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserOnBoardingQuestionAnswer',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('skiped', models.BooleanField(db_column='Skiped')),
                ('onboarding_question_index', models.IntegerField(db_column='OnBoardingQuestionIndex')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('deleted', models.BooleanField(db_column='Deleted')),
                ('onboarding_question', models.ForeignKey(db_column='OnBoardingQuestionId', on_delete=django.db.models.deletion.PROTECT, to='catalog.OnBoardingQuestion')),
                ('onboarding_question_answer', models.ForeignKey(blank=True, db_column='OnBoardingQuestionAnswerId', null=True, on_delete=django.db.models.deletion.PROTECT, to='catalog.Onboardingquestionanswer')),
                ('user', models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User')),
            ],
            options={
                'db_table': 'UserOnBoardingQuestionAnswer',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserOnBoardingStatus',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('onboarding_status_code', models.SmallIntegerField(db_column='OnBoardingStatusCode')),
                ('skiped', models.BooleanField(db_column='Skiped')),
                ('created_date', models.DateTimeField(db_column='CreatedDate')),
                ('user', models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User')),
            ],
            options={
                'db_table': 'UserOnBoardingStatus',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WhyUs',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('description', models.CharField(db_column='Description', max_length=512)),
            ],
            options={
                'db_table': ' WhyUs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WhyUsDetail',
            fields=[
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('lang', models.SmallIntegerField(db_column='Lang')),
                ('title', models.CharField(db_column='Title', max_length=64)),
                ('description', models.CharField(db_column='Description', max_length=512)),
                ('why_us', models.ForeignKey(db_column='WhyUsId', on_delete=django.db.models.deletion.CASCADE, to='catalog.WhyUs')),
            ],
            options={
                'db_table': 'WhyUsDetail',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AspNetUserRoles',
            fields=[
                ('user', models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to='catalog.AspNetUsers')),
                ('role', models.ForeignKey(db_column='RoleId', on_delete=django.db.models.deletion.PROTECT, to='catalog.AspNetRoles')),
            ],
            options={
                'db_table': 'AspNetUserRoles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AspNetUserTokens',
            fields=[
                ('user', models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to='catalog.AspNetUsers')),
                ('login_provider', models.CharField(db_column='LoginProvider', max_length=128)),
                ('name', models.CharField(db_column='Name', max_length=128)),
                ('value', models.TextField(blank=True, db_column='Value', null=True)),
            ],
            options={
                'db_table': 'AspNetUserTokens',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='travelogue',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='travel',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='tag',
            name='category',
            field=models.ForeignKey(blank=True, db_column='CategoryId', null=True, on_delete=django.db.models.deletion.PROTECT, to='catalog.TagCategory'),
        ),
        migrations.AddField(
            model_name='suggestion',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='savedattraction',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='reportedbug',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='hoteltag',
            name='tag',
            field=models.ForeignKey(db_column='TagId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Tag'),
        ),
        migrations.AddField(
            model_name='hotelsurveyreaction',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='hotelsurvey',
            name='travel',
            field=models.ForeignKey(db_column='TravelId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Travel'),
        ),
        migrations.AddField(
            model_name='hotelsurvey',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='hotelmeal',
            name='meal',
            field=models.ForeignKey(db_column='MealId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Meal'),
        ),
        migrations.AddField(
            model_name='favoriteattraction',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='eventtag',
            name='tag',
            field=models.ForeignKey(db_column='TagId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Tag'),
        ),
        migrations.AddField(
            model_name='eventsurveyreaction',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='eventsurvey',
            name='travel',
            field=models.ForeignKey(db_column='TravelId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Travel'),
        ),
        migrations.AddField(
            model_name='eventsurvey',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='event',
            name='subcategory',
            field=models.ForeignKey(db_column='SubCategoryId', on_delete=django.db.models.deletion.PROTECT, to='catalog.SubCategory'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='complaint_category',
            field=models.ForeignKey(db_column='ComplaintCategoryId', on_delete=django.db.models.deletion.PROTECT, to='catalog.ComplaintCategory'),
        ),
        migrations.AddField(
            model_name='city',
            name='province',
            field=models.ForeignKey(db_column='ProvinceId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Province'),
        ),
        migrations.AddField(
            model_name='category',
            name='department',
            field=models.ForeignKey(db_column='DepartmentId', on_delete=django.db.models.deletion.PROTECT, to='catalog.Department'),
        ),
        migrations.AddField(
            model_name='attractionsurveyreaction',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='attractionsurvey',
            name='travel',
            field=models.ForeignKey(blank=True, db_column='TravelId', null=True, on_delete=django.db.models.deletion.PROTECT, to='catalog.Travel'),
        ),
        migrations.AddField(
            model_name='attractionsurvey',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='attractioncustomsreaction',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.User'),
        ),
        migrations.AddField(
            model_name='attraction',
            name='city',
            field=models.ForeignKey(blank=True, db_column='CityId', null=True, on_delete=django.db.models.deletion.PROTECT, to='catalog.City'),
        ),
        migrations.AddField(
            model_name='attraction',
            name='tag',
            field=models.ManyToManyField(blank=True, db_table='AttractionTag', null=True, to='catalog.Tag'),
        ),
        migrations.AddField(
            model_name='aspnetuserlogins',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.AspNetUsers'),
        ),
        migrations.AddField(
            model_name='aspnetuserclaims',
            name='user',
            field=models.ForeignKey(db_column='UserId', on_delete=django.db.models.deletion.PROTECT, to='catalog.AspNetUsers'),
        ),
        migrations.AddField(
            model_name='aspnetroleclaims',
            name='role',
            field=models.ForeignKey(db_column='RoleId', on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.AspNetRoles'),
        ),
        migrations.AddField(
            model_name='airport',
            name='airport_type',
            field=models.ForeignKey(blank=True, db_column='AirportTypeId', null=True, on_delete=django.db.models.deletion.PROTECT, to='catalog.AirportType'),
        ),
        migrations.AddField(
            model_name='airport',
            name='city',
            field=models.ForeignKey(blank=True, db_column='CityId', null=True, on_delete=django.db.models.deletion.PROTECT, to='catalog.City'),
        ),
        migrations.AddField(
            model_name='airport',
            name='subcategory',
            field=models.ForeignKey(blank=True, db_column='SubCategoryId', null=True, on_delete=django.db.models.deletion.PROTECT, to='catalog.SubCategory'),
        ),
    ]
